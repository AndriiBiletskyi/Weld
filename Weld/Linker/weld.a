;/*****************************************************
;Chip type               : ATmega64A
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega64a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define A           (PINE.5==1)
;#define LEFT        (PIND.5==0)
;#define RIGHT       (PIND.4==0)
;#define TASK_MAX    300
;#define REF_PLUS    PORTD&=~(1<<7);
;#define REF_MINUS   PORTD|=(1<<7);
;#define FEED_MAX    999
;#define FEED_MIN    0
;#define FEED_UP     (PIND.2==0)
;#define FEED_DOWN   (PIND.3==0)
;#define FEED_STEP   10
;#define JOG_PLUS    (PIND.0==0)
;#define JOG_MINUS   (PIND.1==0)
;#define JOG_RAPID   (PIND.6==0)
;#define SPEED_RAPID 512
;#define SPEED_WORK  256
;
;
;static flash unsigned char digit[]={
;    0b00111111, //0
;    0b00000110, //1
;    0b01011011, //2
;    0b01001111, //3
;    0b01100110, //4
;    0b01101101, //5
;    0b01111101, //6
;    0b00000111, //7
;    0b01111111, //8
;    0b01101111  //9
;};
;char enable = 0;
;float set_position = 0;
;long int current_position = 0;
;float feed = 0;
;eeprom int feed_eep;
;
;
;void sem_seg(int a);//show feed value
;void init(void);
;interrupt [EXT_INT4] void ext_int4_isr(void);//set position from spindel's encoder
;interrupt [EXT_INT6] void ext_int6_isr(void);//current position from axis's encoder
;void move(long int task);
;void buttons(void);
;
;
;void main(void)
; 0000 003B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 003C     init();
;PCODE: $0000000E VOL: 0
; 0000 003D     feed = feed_eep/100;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003E     sem_seg(feed_eep);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003F 
; 0000 0040     while(1)
;PCODE: $0000001B VOL: 0
; 0000 0041     {
; 0000 0042         if(LEFT || RIGHT){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0043             enable = 1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0044             while(LEFT || RIGHT){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0045                 move(set_position - current_position);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0046                 buttons();
;PCODE: $0000003B VOL: 0
; 0000 0047             }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0048             move(0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0049             enable = 0;
;PCODE: $00000040 VOL: 0
; 0000 004A             delay_ms(100);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004B             current_position = 0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004C             set_position = 0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004D         }
; 0000 004E 
; 0000 004F         if(JOG_PLUS || JOG_MINUS){
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0050             #asm("cli")
;PCODE: $00000053 VOL: 0
	cli
;PCODE: $00000054 VOL: 0
; 0000 0051             if(JOG_PLUS){
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0052                 REF_PLUS
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0053             }else {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0054                 REF_MINUS
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0055             }
;PCODE: $0000005E VOL: 0
; 0000 0056             while(JOG_PLUS || JOG_MINUS){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0057                 if(JOG_RAPID){
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0058                     move(SPEED_RAPID);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0059                 }else {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 005A                     move(SPEED_WORK);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005B                 }
;PCODE: $00000073 VOL: 0
; 0000 005C             }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 005D             current_position = 0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005E             set_position = 0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005F             #asm("sei")
;PCODE: $0000007A VOL: 0
	sei
;PCODE: $0000007B VOL: 0
; 0000 0060         }
; 0000 0061 
; 0000 0062         buttons();
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0063         move(set_position - current_position);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0064     }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0065 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
;void buttons(void)
; 0000 006A {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006B     static float feed_show = 0;
; 0000 006C     static char num = 1;

	.DSEG

	.CSEG
; 0000 006D     if(num){
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 006E         feed_show = feed_eep;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006F         num = 0;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0070     }
; 0000 0071 
; 0000 0072     if(FEED_UP){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0073         feed_show += FEED_STEP;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0074         if(feed_show>FEED_MAX)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0075             feed_show = FEED_MAX;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0076         feed = feed_show/100;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0077         sem_seg(feed_show);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0078         delay_ms(200);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0079         feed_eep = feed_show;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 007A      }
; 0000 007B      if(FEED_DOWN){
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007C         feed_show -= FEED_STEP;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 007D         if(feed_show<FEED_MIN)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007E             feed_show = FEED_MIN;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 007F         feed = feed_show/100;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0080         sem_seg(feed_show);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0081         delay_ms(200);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0082         feed_eep = feed_show;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0083      }
; 0000 0084 }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
;void sem_seg(int a)
; 0000 0089 {
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 008A     PORTC = digit[a%10];
;PCODE: $000000D7 VOL: 0
;	a -> Y+0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 008B     PORTB = digit[(a%100)/10];
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 008C     PORTA = digit[(a%1000)/100];
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 008D }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
;void move(long int task)
; 0000 0092 {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0093     if(task>0){
;PCODE: $000000F5 VOL: 0
;	task -> Y+0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0094         REF_PLUS
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0095     }
; 0000 0096     if(task<0){
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0097         REF_MINUS
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0098         task *= -1;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0099     }
; 0000 009A     if(task>TASK_MAX)
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 009B         task = TASK_MAX;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 009C 
; 0000 009D     PORTF = task;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 009E     task = (task>>8);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 009F     PORTG = task;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00A0 }
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
;interrupt [EXT_INT6] void ext_int6_isr(void)
; 0000 00A5 {
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00A6     if(enable){
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00A7         if(RIGHT){
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00A8             set_position += feed/2.5;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00A9         }
; 0000 00AA         if(LEFT){
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00AB             set_position -= feed/2.5;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00AC         }
; 0000 00AD     }
;PCODE: $0000012F VOL: 0
; 0000 00AE }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
;interrupt [EXT_INT4] void ext_int4_isr(void)
; 0000 00B3 {
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00B4         if(!A){
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00B5             current_position++;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00B6         }else {
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00B7             current_position--;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00B8         }
;PCODE: $00000143 VOL: 0
; 0000 00B9 }
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
;void init(void)
; 0000 00BE {
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00BF     PORTA=0b00000000;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00C0     DDRA=0x7F;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00C1 
; 0000 00C2     PORTB=0x00000000;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C3     DDRB=0x7F;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00C4 
; 0000 00C5     PORTC=0b00000000;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00C6     DDRC=0x7F;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00C7 
; 0000 00C8     PORTD=0b01111111;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00C9     DDRD=0b10000000;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00CA 
; 0000 00CB     PORTE=0xFF;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00CC     DDRE=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00CD 
; 0000 00CE     PORTF=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00CF     DDRF=0xFF;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00D0 
; 0000 00D1     PORTG=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00D2     DDRG=0x03;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00D3 
; 0000 00D4     // Timer/Counter 1 initialization
; 0000 00D5     // Clock source: System Clock
; 0000 00D6     // Clock value: 65,500 kHz
; 0000 00D7     // Mode: Normal top=0xFFFF
; 0000 00D8     // Input Capture on Falling Edge
; 0000 00D9     // Timer1 Overflow Interrupt: On
; 0000 00DA     TCCR1A=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00DB     TCCR1B=0x00;//0x04
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00DC     TCNT1H=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00DD     TCNT1L=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00DE     ICR1H=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00DF     ICR1L=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00E0     OCR1AH=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00E1     OCR1AL=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00E2     OCR1BH=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00E3     OCR1BL=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00E4     OCR1CH=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00E5     OCR1CL=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00E6 
; 0000 00E7     // Timer/Counter 3 initialization
; 0000 00E8     // Clock source: T3 pin Rising Edge
; 0000 00E9     // Mode: CTC top=OCR3A
; 0000 00EA     // Input Capture on Falling Edge
; 0000 00EB     // Compare A Match Interrupt: On
; 0000 00EC     TCCR3A=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00ED     TCCR3B=0x00;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00EE     TCNT3H=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00EF     TCNT3L=0x00;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00F0     ICR3H=0x00;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00F1     ICR3L=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00F2     OCR3AH=0x00;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00F3     OCR3AL=0x00;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00F4     OCR3BH=0x00;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00F5     OCR3BL=0x00;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00F6     OCR3CH=0x00;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00F7     OCR3CL=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00F8 
; 0000 00F9     // External Interrupt(s) initialization
; 0000 00FA     // INT0: Off
; 0000 00FB     // INT1: Off
; 0000 00FC     // INT2: Off
; 0000 00FD     // INT3: Off
; 0000 00FE     // INT4: On
; 0000 00FF     // INT4 Mode: Rising Edge
; 0000 0100     // INT5: Off
; 0000 0101     // INT6: On
; 0000 0102     // INT6 Mode: Rising Edge
; 0000 0103     // INT7: Off
; 0000 0104     EICRA=0x00;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0105     EICRB=0x33;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0106     EIMSK=0x50;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0107     EIFR=0x50;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0108 
; 0000 0109     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 010A     TIMSK=0x00;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 010B 
; 0000 010C     ETIMSK=0x00;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 010D 
; 0000 010E     #asm("sei")
;PCODE: $000001A1 VOL: 0
	sei
;PCODE: $000001A2 VOL: 0
; 0000 010F }
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;//----------------------------------------------------
;//
;//----------------------------------------------------
